diff --git a/package.json b/package.json
index aabbcc1..e4b1d2c 100644
--- a/package.json
+++ b/package.json
@@ -8,7 +8,14 @@
   "scripts": {
-    "dev": "vite",
-    "build": "vite build",
+    "dev": "vite",
+    "build": "tsc -b && vite build",
     "preview": "vite preview"
   },
   "dependencies": {
-    "react-router-dom": "^6.0.2"
+    "react-router-dom": "^6.23.1",
+    "bcryptjs": "^2.4.3",
+    "csv-parse": "^5.4.0",
+    "node-fetch": "^2.6.7"
   }
 }
diff --git a/src/worker/api/login.ts b/src/worker/api/login.ts
new file mode 100644
index 0000000..c2a5e3f
--- /dev/null
+++ b/src/worker/api/login.ts
@@ -0,0 +1,24 @@
+import { getUserByUsername } from '../../shared/db';
+import bcrypt from 'bcryptjs';
+
+export async function handleLogin(request: Request) {
+  const { username, password } = await request.json();
+  const user = await getUserByUsername(username);
+  if (!user) {
+    return new Response(JSON.stringify({ error: 'Usuário não encontrado' }), { status: 401 });
+  }
+  const valid = await bcrypt.compare(password, user.password_hash);
+  if (!valid) {
+    return new Response(JSON.stringify({ error: 'Senha inválida' }), { status: 401 });
+  }
+  return new Response(JSON.stringify({
+    id: user.id,
+    username: user.username,
+    role: user.role
+  }), { status: 200 });
+}
diff --git a/src/worker/api/client.ts b/src/worker/api/client.ts
new file mode 100644
index 0000000..eaaec5e
--- /dev/null
+++ b/src/worker/api/client.ts
@@ -0,0 +1,23 @@
+import { createUser, associateDashboards } from "../../shared/db";
+import bcrypt from "bcryptjs";
+
+export async function handleCreateClient(request: Request) {
+  const { username, password, dashboardIds } = await request.json();
+  const password_hash = await bcrypt.hash(password, 10);
+  const user = await createUser({
+    username,
+    password_hash,
+    role: "cliente"
+  });
+  if (Array.isArray(dashboardIds)) {
+    await associateDashboards(user.id, dashboardIds);
+  }
+  return new Response(JSON.stringify({ id: user.id, username: user.username }), { status: 200 });
+}
diff --git a/src/worker/api/dashboards.ts b/src/worker/api/dashboards.ts
new file mode 100644
index 0000000..7a6f2e1
--- /dev/null
+++ b/src/worker/api/dashboards.ts
@@ -0,0 +1,27 @@
+import { getDashboardsByUser, getAllDashboards } from "../../shared/db";
+
+export async function handleDashboards(request: Request, user: any) {
+  if (user.role === "master") {
+    const dashboards = await getAllDashboards();
+    return new Response(JSON.stringify(dashboards), { status: 200 });
+  }
+  const dashboards = await getDashboardsByUser(user.id);
+  return new Response(JSON.stringify(dashboards), { status: 200 });
+}
+
+// Importação de Google Sheets via CSV
+import fetch from "node-fetch";
+import { parse } from "csv-parse/sync";
+import { overwriteDashboardData, getDashboardById } from "../../shared/db";
+
+function parseBR(str: string) {
+  return parseFloat(str.replace(/\./g, "").replace(",", "."));
+}
+
+export async function handleImportSheets(request: Request) {
+  const { id } = request.params;
+  const dashboard = await getDashboardById(id);
+  if (!dashboard || !dashboard.sheets_url) {
+    return new Response(JSON.stringify({ error: "Dashboard/planilha não encontrada" }), { status: 404 });
+  }
+  const response = await fetch(dashboard.sheets_url);
+  const csv = await response.text();
+  const records = parse(csv, { columns: true, skip_empty_lines: true });
+  await overwriteDashboardData(dashboard.id, records.map((r: any) => ({
+    date: r.Data,
+    investment: parseBR(r.Investimento),
+    clicks: Number(r.Clicks),
+    leads: Number(r.Leads),
+    conversations: Number(r.Conversas),
+    sales: Number(r.Vendas),
+    revenue: parseBR(r.Faturamento)
+  })));
+  return new Response(JSON.stringify({ ok: true }), { status: 200 });
+}
diff --git a/src/react-app/routes/ProtectedRoute.tsx b/src/react-app/routes/ProtectedRoute.tsx
index 1234567..e1a2b3c 100644
--- a/src/react-app/routes/ProtectedRoute.tsx
+++ b/src/react-app/routes/ProtectedRoute.tsx
@@ -1,10 +1,16 @@
-import { Navigate } from "react-router-dom";
-
-function ProtectedRoute({ isAuthenticated, children }) {
-  if (!isAuthenticated) {
-    return <Navigate to="/login" replace />;
-  }
-  return children;
-}
-
-export default ProtectedRoute;
+import { Navigate, Outlet } from "react-router-dom";
+
+interface ProtectedRouteProps {
+  isAuthenticated: boolean;
+  redirectPath?: string;
+}
+
+const ProtectedRoute: React.FC<ProtectedRouteProps> = ({
+  isAuthenticated,
+  redirectPath = "/login"
+}) => {
+  if (!isAuthenticated) return <Navigate to={redirectPath} replace />;
+  return <Outlet />;
+};
+
+export default ProtectedRoute;
diff --git a/migrations/2025-07-init.sql b/migrations/2025-07-init.sql
new file mode 100644
index 0000000..c3a4d5e
--- /dev/null
+++ b/migrations/2025-07-init.sql
@@ -0,0 +1,38 @@
+CREATE TABLE users (
+  id SERIAL PRIMARY KEY,
+  username VARCHAR(255) UNIQUE NOT NULL,
+  password_hash VARCHAR(255) NOT NULL,
+  role VARCHAR(50) NOT NULL
+);
+
+-- Gere o hash bcrypt da senha "171217Aa" e insira aqui
+INSERT INTO users (username, password_hash, role)
+VALUES (
+  'Pant',
+  '$2a$10$yWqJcTz5C2R8R4nRjQhMveKJxO9RK4nKfFZVqT8uD/4oQbGf3c3Fq', -- hash exemplo
+  'master'
+);
+
+CREATE TABLE dashboards (
+  id SERIAL PRIMARY KEY,
+  name VARCHAR(255) NOT NULL,
+  business_model VARCHAR(255),
+  sheets_url VARCHAR(500)
+);
+
+CREATE TABLE user_dashboards (
+  user_id INT REFERENCES users(id),
+  dashboard_id INT REFERENCES dashboards(id),
+  PRIMARY KEY (user_id, dashboard_id)
+);
+
+CREATE TABLE dashboard_data (
+  id SERIAL PRIMARY KEY,
+  dashboard_id INT REFERENCES dashboards(id),
+  date VARCHAR(20),
+  investment NUMERIC,
+  clicks INT,
+  leads INT,
+  conversations INT,
+  sales INT,
+  revenue NUMERIC
+  -- adicione outros campos conforme necessário
+);